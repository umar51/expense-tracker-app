{"ast":null,"code":"var _jsxFileName = \"/home/umar/To be backuped/bootcampwithmamoon/bootcamp/expense-tracker-app/src/context/GlobalState.js\",\n    _s = $RefreshSig$();\n\nimport React, { createContext, useReducer } from 'react';\nimport { AppReducer } from './AppReducer.js'; //inintial state object\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst initialState = {\n  transactions: [//used dummy transactions for building reference\n    // { id: 1, text: 'Flower', amount: -20 }, //expense is negative number\n    // { id: 2, text: 'Salary', amount: 300 }, //salary is positive number\n    // { id: 3, text: 'Book', amount: -10 },\n    // { id: 4, text: 'Camera', amount: 150 } \n  ]\n}; //Create context\n\nexport const GlobalContext = /*#__PURE__*/createContext(initialState); //Provider of Global context\n\nexport const GlobalProvider = ({\n  children\n}) => {\n  _s();\n\n  //passing children destructuring as provider will be wrapped on other components\n  const [state, dispatch] = useReducer(AppReducer, initialState); //for actions\n  //Actions\n\n  function deleteTransaction(id) {\n    dispatch({\n      //passing the object of elements type and payload to dispatch method, elements of dispatch are actions defined in Reducer\n      type: 'DELETE_TRANSACTION',\n      //type of action\n      payload: id //id of transaction on which action will effect \n\n    });\n  }\n\n  function addTransaction(transaction) {\n    dispatch({\n      type: 'ADD_TRANSACTION',\n      payload: transaction\n    });\n  }\n\n  return /*#__PURE__*/_jsxDEV(GlobalContext.Provider, {\n    value: {\n      //value prop is passed down the provider which has transaction object as value\n      transactions: state.transactions,\n      //state.transactions will give access to all elements of transaction object \n      deleteTransaction,\n      addTransaction\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 40,\n    columnNumber: 13\n  }, this);\n};\n\n_s(GlobalProvider, \"6JWkGZ32UPfojeNx+xqn8ZU8A0Q=\");\n\n_c = GlobalProvider;\n\nvar _c;\n\n$RefreshReg$(_c, \"GlobalProvider\");","map":{"version":3,"sources":["/home/umar/To be backuped/bootcampwithmamoon/bootcamp/expense-tracker-app/src/context/GlobalState.js"],"names":["React","createContext","useReducer","AppReducer","initialState","transactions","GlobalContext","GlobalProvider","children","state","dispatch","deleteTransaction","id","type","payload","addTransaction","transaction"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,aAAhB,EAA+BC,UAA/B,QAAgD,OAAhD;AACA,SAAQC,UAAR,QAAyB,iBAAzB,C,CAEA;;;AAEA,MAAMC,YAAY,GAAG;AACjBC,EAAAA,YAAY,EAAE,CACV;AACA;AACA;AACA;AACA;AALU;AADG,CAArB,C,CAUA;;AAEA,OAAO,MAAMC,aAAa,gBAAGL,aAAa,CAACG,YAAD,CAAnC,C,CAEP;;AAEA,OAAO,MAAMG,cAAc,GAAG,CAAC;AAACC,EAAAA;AAAD,CAAD,KAAgB;AAAA;;AAAG;AAC7C,QAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBR,UAAU,CAACC,UAAD,EAAaC,YAAb,CAApC,CAD0C,CACsB;AAEpE;;AACI,WAASO,iBAAT,CAA2BC,EAA3B,EAA+B;AAC3BF,IAAAA,QAAQ,CAAC;AAAI;AACTG,MAAAA,IAAI,EAAE,oBADD;AACuB;AAC5BC,MAAAA,OAAO,EAAEF,EAFJ,CAEU;;AAFV,KAAD,CAAR;AAIH;;AAED,WAASG,cAAT,CAAwBC,WAAxB,EAAqC;AACjCN,IAAAA,QAAQ,CAAC;AACLG,MAAAA,IAAI,EAAE,iBADD;AAELC,MAAAA,OAAO,EAAEE;AAFJ,KAAD,CAAR;AAIH;;AAED,sBAAQ,QAAC,aAAD,CAAe,QAAf;AAAwB,IAAA,KAAK,EAAE;AAAE;AACrCX,MAAAA,YAAY,EAAEI,KAAK,CAACJ,YADe;AACD;AAClCM,MAAAA,iBAFmC;AAGnCI,MAAAA;AAHmC,KAA/B;AAAA,cAMHP;AANG;AAAA;AAAA;AAAA;AAAA,UAAR;AAQH,CA1BM;;GAAMD,c;;KAAAA,c","sourcesContent":["import React, { createContext, useReducer} from 'react';\nimport {AppReducer} from './AppReducer.js'\n\n//inintial state object\n\nconst initialState = {\n    transactions: [\n        //used dummy transactions for building reference\n        // { id: 1, text: 'Flower', amount: -20 }, //expense is negative number\n        // { id: 2, text: 'Salary', amount: 300 }, //salary is positive number\n        // { id: 3, text: 'Book', amount: -10 },\n        // { id: 4, text: 'Camera', amount: 150 } \n    ]\n}\n\n//Create context\n\nexport const GlobalContext = createContext(initialState);\n\n//Provider of Global context\n\nexport const GlobalProvider = ({children}) => {  //passing children destructuring as provider will be wrapped on other components\n    const [state, dispatch] = useReducer(AppReducer, initialState); //for actions\n\n//Actions\n    function deleteTransaction(id) {\n        dispatch({   //passing the object of elements type and payload to dispatch method, elements of dispatch are actions defined in Reducer\n            type: 'DELETE_TRANSACTION', //type of action\n            payload: id    //id of transaction on which action will effect \n        });\n    }\n\n    function addTransaction(transaction) {\n        dispatch({\n            type: 'ADD_TRANSACTION',\n            payload: transaction\n        })\n    }\n\n    return (<GlobalContext.Provider value={{ //value prop is passed down the provider which has transaction object as value\n        transactions: state.transactions, //state.transactions will give access to all elements of transaction object \n        deleteTransaction,\n        addTransaction\n\n    }}>\n        {children}\n    </GlobalContext.Provider>)\n}"]},"metadata":{},"sourceType":"module"}
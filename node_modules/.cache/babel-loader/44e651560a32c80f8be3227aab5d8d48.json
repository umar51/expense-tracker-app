{"ast":null,"code":"const AppReducer = (state, action) => {\n  switch (action.type) {\n    case 'DELETE_TRANSACTION':\n      return { ...state,\n        //global state initialState has object of transactions\n        transactions: state.transactions.filter(transaction => transaction.id !== action.payload) //filter method is used over transactions object where it maps over object and passes only those transaction whose id is not equal to the id passed in payload.\n\n      };\n\n    case 'ADD_TRANSACTION':\n      return { ...state,\n        //accessing the initialState\n        transactions: [action.payload, ...state.transactions] //making array of current transactions and new transaction coming as payload \n\n      };\n\n    default:\n      return state;\n    //as default it returns the state as is it\n  }\n};\n\n_c = AppReducer;\nexport default AppReducer;\n\nvar _c;\n\n$RefreshReg$(_c, \"AppReducer\");","map":{"version":3,"sources":["/home/umar/To be backuped/bootcampwithmamoon/bootcamp/expense-tracker-app/src/context/AppReducer.js"],"names":["AppReducer","state","action","type","transactions","filter","transaction","id","payload"],"mappings":"AAEA,MAAMA,UAAU,GAAE,CAACC,KAAD,EAAQC,MAAR,KAAmB;AACjC,UAAOA,MAAM,CAACC,IAAd;AACI,SAAK,oBAAL;AACI,aAAM,EACF,GAAGF,KADD;AAC4B;AAC9BG,QAAAA,YAAY,EAAEH,KAAK,CAACG,YAAN,CAAmBC,MAAnB,CAA0BC,WAAW,IAAIA,WAAW,CAACC,EAAZ,KAAmBL,MAAM,CAACM,OAAnE,CAFZ,CAEyF;;AAFzF,OAAN;;AAIJ,SAAK,iBAAL;AACI,aAAM,EACF,GAAGP,KADD;AACS;AACXG,QAAAA,YAAY,EAAE,CAACF,MAAM,CAACM,OAAR,EAAiB,GAAGP,KAAK,CAACG,YAA1B,CAFZ,CAEoD;;AAFpD,OAAN;;AAIJ;AACI,aAAOH,KAAP;AAAc;AAZtB;AAcH,CAfD;;KAAMD,U;AAiBN,eAAeA,UAAf","sourcesContent":["\n\nconst AppReducer= (state, action) => {\n    switch(action.type) {\n        case 'DELETE_TRANSACTION':\n            return{\n                ...state,                     //global state initialState has object of transactions\n                transactions: state.transactions.filter(transaction => transaction.id !== action.payload ) //filter method is used over transactions object where it maps over object and passes only those transaction whose id is not equal to the id passed in payload.\n            }\n        case 'ADD_TRANSACTION':\n            return{\n                ...state,  //accessing the initialState\n                transactions: [action.payload, ...state.transactions] //making array of current transactions and new transaction coming as payload \n            }\n        default:\n            return state; //as default it returns the state as is it\n    }\n}\n\nexport default AppReducer;"]},"metadata":{},"sourceType":"module"}